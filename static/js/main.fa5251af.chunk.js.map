{"version":3,"sources":["API/Users.js","API/Comments.js","API/Posts.js","App.js","serviceWorker.js","index.js"],"names":["Users","post","users","name","href","email","address","city","street","suite","zipcode","Comments","comment","className","body","Posts","posts","map","title","key","id","comments","BASE_URL","App","state","originalPosts","isLoading","hasError","isLoaded","inputValue","loadData","a","setState","Promise","all","fetch","dataPosts","dataComments","dataUsers","json","preparedPosts","find","user","userId","filter","postId","erorr","message","console","log","handleInputFilter","event","value","target","includes","handleResetPosts","prevState","this","length","type","onChange","placeholder","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa5251af.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Users({ post }) {\n    return <div>\n    <p><strong>{post.users.name}</strong></p>\n    <a href={`mailto:${post.users.email}`}>{post.users.email}</a>\n<p>\n<span><strong>city:</strong>{` ${post.users.address.city}; `}</span>\n<span><strong>street:</strong>{` ${post.users.address.street}; `}</span>\n<span><strong>suite:</strong>{` ${post.users.address.suite}; `}</span>\n<span><strong>zip-code:</strong>{` ${post.users.address.zipcode}.`}</span>\n</p>\n</div>\n}\n\nexport default Users;\n","import React from 'react';\nimport './Comments.css'\n\nfunction Comments({ comment }) {\n\nreturn   (\n<li className=\"comment\">\n    <h3>{comment.name}</h3>\n<a  href={`mailto:${comment.email}`}>{comment.email}</a>\n<p>{comment.body}</p>\n  </li>\n  )\n\n \n\n}\n\nexport default Comments;","import React from 'react';\nimport Users from './Users';\nimport Comments from './Comments';\nimport './Posts.css'\n\nfunction Posts({ posts }) {\nreturn <div className=\"post-list\">\n  {posts.map((post) =>  (\n    <div className=\"post\">\n    <h2 className=\"post-title\">{post.title}</h2>\n    <p className=\"post-text\">{post.body}</p>\n\n <Users key={post.id} post={post} />\n\n <ul className=\"comment-list\">\n{post.comments.map(comment => { \n\nreturn <Comments key={comment.id} comment={comment} />\n\n})}\n\n</ul>\n\n\n    </div>\n  \n  )\n  )}\n  </div>\n}\n\n\nexport default Posts;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Posts from './API/Posts';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nclass App extends Component {\n  state ={\n    posts: [],\n    originalPosts: [],\n    isLoading: false,\n    hasError: false,\n    isLoaded: false,\n    inputValue: '',\n  };\n\n  loadData = async() => {\n    this.setState({\n      isLoading: true\n    })\n\n    try {\n      const [dataPosts, dataComments, dataUsers] = await Promise.all([\n        fetch(`${BASE_URL}/posts`),\n        fetch(`${BASE_URL}/comments`),\n        fetch(`${BASE_URL}/users`)\n      ]);\n      \n      const posts = await dataPosts.json();\n      const comments = await dataComments.json();\n      const users = await dataUsers.json();\n\n    \n\nconst preparedPosts = posts.map(post => ({\n  ...post,\n  users: users.find(user => user.id === post.userId),\n  comments: comments.filter(comment => comment.postId === post.id),\n\n}))\n//console.log(preparedPosts)\n\n\n  this.setState({\n    posts: preparedPosts,\n    originalPosts: preparedPosts,\n    hasError: false,\n    isLoaded: true\n  })\n }\n\n catch(error) {\n   this.setState({\n     erorr: error.message,\n  //   isLoading: false,\n      hasError: true\n   })\n   console.log(error)\n }\n\n finally {\nthis.setState({\n isLoading: false \n})\n }\n}\n\nhandleInputFilter = (event) => {\n  const { originalPosts } = this.state;\n  const { value } = event.target;\n\n  this.setState({\n    inputValue: value,\n    posts: [...originalPosts].filter(post => (\n      post.title.includes(value) || post.body.includes(value)\n    )),\n    // originalPosts: [],\n  });\n};\n\nhandleResetPosts = () => {\n  this.setState(prevState => ({\n inputValue:'',\n    posts: prevState.originalPosts,\n   }));\n}\n\n  render() {\n    const { posts, isLoading, hasError, inputValue, isLoaded } = this.state;\n    \nreturn (\n<div className='app'>\n  {isLoaded ? (\n    <>\n    <h1 className=\"title\">Dynamic List of Posts</h1>\n    <p>Posts: {posts.length}</p>\n    <input\n      type=\"text\"\n      onChange={this.handleInputFilter}\n      name=\"search-input\"\n      placeholder=\"Search...\"\n      value={inputValue}\n      className=\"filter__input\"\n    />\n    <button type=\"button\" onClick={this.handleResetPosts}>Reset</button>\n        <Posts posts={posts} key={posts.id} />\n    </>\n  ) : (\n    <>\n      <p className=\"message\">\n        {hasError ? 'Error occured!!!' : 'Load Posts'}\n      </p>\n      <button type=\"button\" className=\"message-button\" onClick={this.loadData}>\n        {isLoading ? 'Loading...' : hasError ? 'Try Again' : 'Load'}\n      </button>\n    </>\n  )}\n  </div>\n)\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}